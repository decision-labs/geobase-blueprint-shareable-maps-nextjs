--
-- Setup Users Table
--

create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  nickname text,
  photo_url text,

  primary key (id)
);

alter table public.profiles enable row level security;

-- inserts a row into public.profiles
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profiles (id, nickname, photo_url)
  values (new.id, new.raw_user_meta_data ->> 'nickname', new.raw_user_meta_data ->> 'photo_url');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

--
-- Map Projects Table
--

create table
public.smb_map_projects (
    id bigint generated by default as identity primary key,
    uuid uuid null unique, -- This is used as the URL slug
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now(),
    published boolean not null default false,
    title text not null default ''::text,
    description text not null default ''::text,
    bounds jsonb null,
    profile_id uuid not null references public.profiles(id) on delete cascade
);

create index on public.smb_map_projects (uuid);
create index on public.smb_map_projects (published);

alter table public.smb_map_projects enable row level security;

-- Not authed, only published projects are visible
create policy "Allow public map read access" on public.smb_map_projects
  for select using (published);

-- Authed, only the owner can update or delete
create policy "Allow map owner write access" on public.smb_map_projects
  for all using ((select auth.uid()) = profile_id);

--
-- Drawings Table
--

create table
public.smb_drawings (
	id bigint generated by default as identity primary key,
	created_at timestamp with time zone not null default now(),
	updated_at timestamp with time zone not null default now(),
	shape geometry(LineString, 4326) not null,
	meta jsonb not null default '{}'::jsonb,
	profile_id uuid not null references public.profiles(id) on delete cascade,
	project_id bigint not null references public.smb_map_projects(id) on delete cascade
);

alter table public.smb_drawings enable row level security;

-- Allow read access if the drawing's project is published
create policy "Allow published map drawings read access" on public.smb_drawings
  for select using (project_id in (select project_id from public.smb_map_projects where published = true));

-- Authed, only the drawing's owner can update, read, or delete
create policy "Allow drawing owner general access" on public.smb_drawings
  for all using ((select auth.uid()) = profile_id);

--
-- Pins Table
--

create table
public.smb_pins (
	id bigint generated by default as identity primary key,
	created_at timestamp with time zone not null default now(),
	updated_at timestamp with time zone not null default now(),
	shape geometry(Point, 4326) not null,
	meta jsonb not null default '{}'::jsonb,
	profile_id uuid not null references public.profiles(id) on delete cascade,
	project_id bigint not null references public.smb_map_projects(id) on delete cascade
);

alter table public.smb_pins enable row level security;

-- Allow read access if the pin's project is published
create policy "Allow published map pins read access" on public.smb_pins
  for select using (project_id in (select project_id from public.smb_map_projects where published = true));

-- Authed, only the pin's owner can update, read, or delete
create policy "Allow pin owner general access" on public.smb_pins
  for all using ((select auth.uid()) = profile_id);

--
-- Annotations Table
--

create table
public.smb_annotations (
	id bigint generated by default as identity primary key,
	created_at timestamp with time zone not null default now(),
	updated_at timestamp with time zone not null default now(),
	shape geometry(Point, 4326) not null,
	meta jsonb not null default '{}'::jsonb,
	profile_id uuid not null references public.profiles(id) on delete cascade,
	project_id bigint not null references public.smb_map_projects(id) on delete cascade
);

alter table public.smb_annotations enable row level security;

-- Allow read access if the annotation's project is published
create policy "Allow published map annotations read access" on public.smb_annotations
  for select using (project_id in (select project_id from public.smb_map_projects where published = true));

-- Authed, only the annotation's owner can update, read, or delete
create policy "Allow annotation owner general access" on public.smb_annotations
  for all using ((select auth.uid()) = profile_id);

--
-- Attachments Table
--

create table
public.smb_attachments (
	id bigint generated by default as identity primary key,
	created_at timestamp with time zone not null default now(),
	updated_at timestamp with time zone not null default now(),
	shape geometry(Point, 4326) not null,
	meta jsonb not null default '{}'::jsonb,
	profile_id uuid not null references public.profiles(id) on delete cascade,
	project_id bigint not null references public.smb_map_projects(id) on delete cascade
);

alter table public.smb_attachments enable row level security;

-- Allow read access if the attachment's project is published
create policy "Allow published map attachments read access" on public.smb_attachments
  for select using (project_id in (select project_id from public.smb_map_projects where published = true));

-- Authed, only the attachment's owner can update, read, or delete
create policy "Allow attachment owner general access" on public.smb_attachments
  for all using ((select auth.uid()) = profile_id);
